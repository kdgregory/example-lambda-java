##
## Template for a deployment with custom hostnames and HTTPS between CloudFront and ALB.
##

AWSTemplateFormatVersion:               "2010-09-09"
Description:                            "Sample Lambda web application programmed in Java"

Parameters:

  BaseName:
    Description:                        "Base name for all objects created by this template"
    Type:                               "String"

  VpcId:
    Description:                        "The VPC where the load balancer will be deployed"
    Type:                               "AWS::EC2::VPC::Id"

  PublicSubnetIds:
    Description:                        "The list of public subnets where load balancer endpoints will live"
    Type:                               "List<AWS::EC2::Subnet::Id>"

  DNSDomain:
    Description:                        "The DNS domain where this site will be exposed"
    Type:                               "String"
    Default:                            ""

  Hostname:
    Description:                        "The DNS hostname for the main entrypoint"
    Type:                               "String"
    Default:                            ""

  ACMCertificateArn:
    Description:                        "An ACM certificate ID"
    Type:                               "String"

  DeploymentBucketName:
    Description:                        "Name of the bucket where the Lambda deployment bundles live"
    Type:                               "String"

  WebappJar:
    Description:                        "Bucket key for the WebApp deployment JAR"
    Type:                               "String"

  ResizerJar:
    Description:                        "Bucket key for the Resizer deployment JAR"
    Type:                               "String"

  StaticBucketName:
    Description:                        "Name of the bucket where static content lives"
    Type:                               "String"

  ImageBucketName:
    Description:                        "Name of the bucket where image content lives"
    Type:                               "String"

  UploadBucketName:
    Description:                        "Name of the bucket where images will be uploaded"
    Type:                               "String"

  LogsBucketName:
    Description:                        "Name of the bucket where the load balancer will write its logs"
    Type:                               "String"

  CloudFrontAssetTTL:
    Description:                        "The default time-to-live, in seconds, for static assets served through CloudFront (change to 0 for development)"
    Type:                               "Number"
    Default:                            86400


Resources:

  ##
  ## Cognito
  ##

  CognitoUserPool:
    Type:                               "AWS::Cognito::UserPool"
    Properties:
      UserPoolName:                     !Ref BaseName
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly:       false
        UnusedAccountValidityDays:      7
      MfaConfiguration:                 "OFF"
      Policies:
        PasswordPolicy:
          MinimumLength:                8
          RequireUppercase:             true
          RequireLowercase:             true
          RequireNumbers:               true
          RequireSymbols:               false
      Schema:
        - Name:                         "email"
          Required:                     true
          Mutable:                      true
          DeveloperOnlyAttribute:       false
          AttributeDataType:            "String"
          StringAttributeConstraints:
            MinLength:                  0
            MaxLength:                  2048
        - Name:                         "email_verified"
          Required:                     false
          Mutable:                      true
          DeveloperOnlyAttribute:       false
          AttributeDataType:            "Boolean"
      UsernameAttributes:               [ "email" ]
      AutoVerifiedAttributes:           [ "email" ]


  CognitoUserPoolDomain:
    Type:                               "AWS::Cognito::UserPoolDomain"
    Properties:
      UserPoolId:                       !Ref CognitoUserPool
      Domain:                           !Sub "${Hostname}-auth"


  CognitoUserPoolClient:
    Type:                               "AWS::Cognito::UserPoolClient"
    Properties:
      UserPoolId:                       !Ref CognitoUserPool
      ClientName:                       "default"
      SupportedIdentityProviders:       [ "COGNITO" ]
      AllowedOAuthFlowsUserPoolClient:  true
      AllowedOAuthFlows:                [ "code", "implicit" ]
      AllowedOAuthScopes:               [ "openid", "email" ]
      CallbackURLs:                     [ !Sub "https://${Hostname}.${DNSDomain}/oauth2/idpresponse" ]
      GenerateSecret:                   true
      RefreshTokenValidity:             7

  ##
  ## Database
  ##

  DynamoMetadataTable:
    Type:                               "AWS::DynamoDB::Table"
    Properties:
      TableName:                        !Sub "${BaseName}-Metadata"
      AttributeDefinitions:
        - AttributeName:                "id"
          AttributeType:                "S"
        - AttributeName:                "username"
          AttributeType:                "S"
      KeySchema:
        - AttributeName:                "username"
          KeyType:                      "HASH"
        - AttributeName:                "id"
          KeyType:                      "RANGE"
      GlobalSecondaryIndexes:
        - IndexName:                    "byID"
          Projection:
            ProjectionType:             "KEYS_ONLY"
          ProvisionedThroughput:
            ReadCapacityUnits:          5
            WriteCapacityUnits:         5
          KeySchema:
            - AttributeName:            "id"
              KeyType:                  "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits:              10
        WriteCapacityUnits:             5

  ##
  ## Buckets (except deployment)
  ##

  StaticBucket:
    Type:                               "AWS::S3::Bucket"
    Properties:
      BucketName:                       !Ref StaticBucketName
      AccessControl:                    "Private"
      CorsConfiguration:
        CorsRules:
          -
            AllowedMethods:             ["GET"]
            AllowedOrigins:             [ "*" ]
            AllowedHeaders:             [ "*" ]
            ExposedHeaders:             [ "ETag" ]


  StaticBucketPolicy:
    Type:                               "AWS::S3::BucketPolicy"
    DependsOn:                          [ CloudFrontOriginIdentity ]
    Properties:
      Bucket:                           !Ref StaticBucketName
      PolicyDocument:
        Version:                        "2008-10-17"
        Statement:
          - Effect:                     "Allow"
            Principal:
              CanonicalUser:            !GetAtt CloudFrontOriginIdentity.S3CanonicalUserId
            Action:
              -                         "s3:GetObject"
              -                         "s3:ListBucket"
            Resource:
              -                         !Sub "arn:aws:s3:::${StaticBucketName}"
              -                         !Sub "arn:aws:s3:::${StaticBucketName}/*"


  ImageBucket:
    Type:                               "AWS::S3::Bucket"
    Properties:
      BucketName:                       !Ref ImageBucketName
      AccessControl:                    "Private"


  ImageBucketPolicy:
    Type:                               "AWS::S3::BucketPolicy"
    DependsOn:                          [ CloudFrontOriginIdentity ]
    Properties:
      Bucket:                           !Ref ImageBucketName
      PolicyDocument:
        Version:                        "2008-10-17"
        Statement:
          - Effect:                     "Allow"
            Principal:
              CanonicalUser:            !GetAtt CloudFrontOriginIdentity.S3CanonicalUserId
            Action:                     "s3:GetObject"
            Resource:                   !Sub "arn:aws:s3:::${ImageBucketName}/*"


  UploadBucket:
    Type:                               "AWS::S3::Bucket"
    DependsOn:                          [ ResizerInvocationPermission ]
    Properties:
      BucketName:                       !Ref UploadBucketName
      AccessControl:                    "Private"
      CorsConfiguration:
        CorsRules:
          - AllowedMethods:             ["PUT"]
            AllowedOrigins:             [ "*" ]
            AllowedHeaders:             [ "*" ]
      NotificationConfiguration:
        LambdaConfigurations:
          - Event:                      "s3:ObjectCreated:*"
            Function:                   !GetAtt ResizerLambdaFunction.Arn
      LifecycleConfiguration:
        Rules:
          - Id:                         "DeleteUnprocessedUploads"
            ExpirationInDays:           1
            Status:                     "Enabled"


  LogsBucket:
    Type:                               "AWS::S3::Bucket"
    Properties:
      BucketName:                       !Ref LogsBucketName
      AccessControl:                    "Private"
      LifecycleConfiguration:
        Rules:
          - Id:                         "DeleteOldLogs"
            ExpirationInDays:           7
            Status:                     "Enabled"


  LogsBucketPolicy:
    Type:                               "AWS::S3::BucketPolicy"
    Properties:
      Bucket:                           !Ref LogsBucketName
      PolicyDocument:
        Version:                        "2008-10-17"
        Statement:
          - Effect:                     "Allow"
            Principal:
              AWS:                      # per https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-access-logs.html
                -                       "arn:aws:iam::127311923021:root"  # us-east-1
                -                       "arn:aws:iam::033677994240:root"  # us-east-2
                -                       "arn:aws:iam::027434742980:root"  # us-west-1
                -                       "arn:aws:iam::797873946194:root"  # us-west-2
                -                       "arn:aws:iam::985666609251:root"  # ca-central-1
                -                       "arn:aws:iam::054676820928:root"  # eu-central-1
                -                       "arn:aws:iam::156460612806:root"  # eu-west-1
                -                       "arn:aws:iam::652711504416:root"  # eu-west-2
                -                       "arn:aws:iam::009996457667:root"  # eu-west-3
                -                       "arn:aws:iam::897822967062:root"  # eu-north-1
                -                       "arn:aws:iam::754344448648:root"  # ap-east-1
                -                       "arn:aws:iam::582318560864:root"  # ap-northeast-1
                -                       "arn:aws:iam::600734575887:root"  # ap-northeast-2
                -                       "arn:aws:iam::383597477331:root"  # ap-northeast-3
                -                       "arn:aws:iam::114774131450:root"  # ap-southeast-1
                -                       "arn:aws:iam::783225319266:root"  # ap-southeast-2
                -                       "arn:aws:iam::718504428378:root"  # ap-south-1
                -                       "arn:aws:iam::076674570225:root"  # me-south-1
                -                       "arn:aws:iam::507241528517:root"  # sa-east-1
            Action:                     "s3:PutObject"
            Resource:                   !Sub "arn:aws:s3:::${LogsBucketName}/LoadBalancer/*"

  ##
  ## Resizer
  ##

  ResizerLogGroup:
    Type:                               "AWS::Logs::LogGroup"
    DeletionPolicy:                     "Delete"
    Properties:
      LogGroupName:                     !Sub "/aws/lambda/${BaseName}-Resizer"
      RetentionInDays:                  7


  ResizerExecutionRole:
    Type:                               "AWS::IAM::Role"
    DependsOn:                          [ DynamoMetadataTable, ResizerLogGroup ]
    Properties:
      RoleName:                         !Sub "${BaseName}-ResizerExecutionRole"
      AssumeRolePolicyDocument:
        Version:                        "2012-10-17"
        Statement:
          Effect:                       "Allow"
          Action:                       "sts:AssumeRole"
          Principal:
            Service:                    "lambda.amazonaws.com"
      Policies:
        - PolicyName:                   !Sub "${BaseName}-ResizerCloudWatchPolicy"
          PolicyDocument:
            Version:                    "2012-10-17"
            Statement:
              - Effect:                 "Allow"
                Action:
                  -                     "logs:CreateLogGroup"
                Resource:               "*"
              - Effect:                 "Allow"
                Action:
                  -                     "logs:CreateLogStream"
                  -                     "logs:PutLogEvents"
                Resource:               !GetAtt ResizerLogGroup.Arn
        - PolicyName:                   !Sub "${BaseName}-ResizerDynamoPolicy"
          PolicyDocument:
            Version:                    "2012-10-17"
            Statement:
              Effect:                   "Allow"
              Action:
                -                       "dynamodb:GetItem"
                -                       "dynamodb:PutItem"
                -                       "dynamodb:Query"
              Resource:
                -                       !Sub "${DynamoMetadataTable.Arn}"
                -                       !Sub "${DynamoMetadataTable.Arn}/*"

        - PolicyName:                   !Sub "${BaseName}-ResizerBucketPolicy"
          PolicyDocument:
            Version:                    "2012-10-17"
            Statement:
              - Effect:                 "Allow"
                Action:
                  -                     "s3:Get*"
                  -                     "s3:Put*"
                Resource:               !Sub "arn:aws:s3:::${ImageBucketName}/*"
              - Effect:                 "Allow"
                Action:
                  -                     "s3:Get*"
                  -                     "s3:Delete*"
                Resource:               !Sub "arn:aws:s3:::${UploadBucketName}/*"


  ResizerLambdaFunction:
    Type:                               "AWS::Lambda::Function"
    DependsOn:                          [ ResizerExecutionRole ]
    Properties:
      Description:                      "Implements the resizer portion of the example"
      Runtime:                          "java8"
      FunctionName:                     !Sub "${BaseName}-Resizer"
      Code:
        S3Bucket:                       !Ref DeploymentBucketName
        S3Key:                          !Ref ResizerJar
      Role:                             !GetAtt ResizerExecutionRole.Arn
      Handler:                          "com.kdgregory.example.javalambda.resizer.Resizer::handler"
      MemorySize:                       1024
      Timeout:                          30
      Environment:
        Variables:
          DYNAMO_TABLE:                 !Ref DynamoMetadataTable
          S3_IMAGE_BUCKET:              !Ref ImageBucketName
          S3_UPLOAD_BUCKET:             !Ref UploadBucketName


  ResizerInvocationPermission:
    Type:                               "AWS::Lambda::Permission"
    DependsOn:                          [ ResizerLambdaFunction ]
    Properties:
      Action:                           "lambda:InvokeFunction"
      FunctionName:                     !GetAtt ResizerLambdaFunction.Arn
      Principal:                        "s3.amazonaws.com"
      SourceAccount:                    !Ref AWS::AccountId
      SourceArn:                        !Sub "arn:aws:s3:::${UploadBucketName}"

  ##
  ## WebApp Lambda
  ##

  WebappLogGroup:
    Type:                               "AWS::Logs::LogGroup"
    DeletionPolicy:                     "Delete"
    Properties:
      LogGroupName:                     !Sub "/aws/lambda/${BaseName}-Webapp"
      RetentionInDays:                  7


  WebappExecutionRole:
    Type:                               "AWS::IAM::Role"
    DependsOn:                          [ CognitoUserPool, DynamoMetadataTable, WebappLogGroup ]
    Properties:
      RoleName:                         !Sub "${BaseName}-WebappExecutionRole"
      AssumeRolePolicyDocument:
        Version:                        "2012-10-17"
        Statement:
          Effect:                       "Allow"
          Action:                       "sts:AssumeRole"
          Principal:
            Service:                    "lambda.amazonaws.com"
      Policies:
        - PolicyName:                   !Sub "${BaseName}-WebappCloudWatchPolicy"
          PolicyDocument:
            Version:                    "2012-10-17"
            Statement:
              - Effect:                 "Allow"
                Action:
                  -                     "logs:CreateLogGroup"
                Resource:               "*"
              - Effect:                 "Allow"
                Action:
                  -                     "logs:CreateLogStream"
                  -                     "logs:PutLogEvents"
                Resource:               !GetAtt WebappLogGroup.Arn
        - PolicyName:                   !Sub "${BaseName}-WebappCognitoPolicy"
          PolicyDocument:
            Version:                    "2012-10-17"
            Statement:
              - Effect:                 "Allow"
                Action:
                  -                     "cognito-idp:*"
                Resource:               !GetAtt CognitoUserPool.Arn
        - PolicyName:                   !Sub "${BaseName}-WebappDynamoPolicy"
          PolicyDocument:
            Version:                    "2012-10-17"
            Statement:
              - Effect:                 "Allow"
                Action:
                  -                     "dynamodb:GetItem"
                  -                     "dynamodb:PutItem"
                  -                     "dynamodb:Query"
                Resource:               !GetAtt DynamoMetadataTable.Arn
        - PolicyName:                   !Sub "${BaseName}-WebappBucketPolicy"
          PolicyDocument:
            Version:                    "2012-10-17"
            Statement:
              - Effect:                 "Allow"
                Action:
                  -                     "s3:Get*"
                  -                     "s3:Put*"
                Resource:               !Sub "arn:aws:s3:::${ImageBucketName}/*"
              - Effect:                 "Allow"
                Action:
                  -                     "s3:Put*"
                Resource:               !Sub "arn:aws:s3:::${UploadBucketName}/*"


  WebappLambdaFunction:
    Type:                               "AWS::Lambda::Function"
    DependsOn:                          [ WebappExecutionRole ]
    Properties:
      Description:                      "Implements the web-app portion of the example"
      Runtime:                          "java8"
      FunctionName:                     !Sub "${BaseName}-Webapp"
      Code:
        S3Bucket:                       !Ref DeploymentBucketName
        S3Key:                          !Ref WebappJar
      Role:                             !GetAtt WebappExecutionRole.Arn
      Handler:                          "com.kdgregory.example.javalambda.webapp.Dispatcher::handler"
      MemorySize:                       1024
      Timeout:                          30
      Environment:
        Variables:
          COGNITO_POOL_ID:              !Ref CognitoUserPool
          COGNITO_CLIENT_ID:            !Ref CognitoUserPoolClient
          DYNAMO_TABLE:                 !Ref DynamoMetadataTable
          S3_IMAGE_BUCKET:              !Ref ImageBucketName
          S3_UPLOAD_BUCKET:             !Ref UploadBucketName


  ##
  ## API Load Balancer
  ##

  LoadBalancerSecurityGroup:
    Type:                               "AWS::EC2::SecurityGroup"
    Properties:
      GroupName:                        !Sub "${BaseName}-SecurityGroup"
      GroupDescription:                 !Sub "Provides Internet access to the ${BaseName} load balancer"
      VpcId:                            !Ref VpcId
      SecurityGroupIngress:
        - Description:                  "HTTPS access from Internet"
          CidrIp:                       "0.0.0.0/0"
          IpProtocol:                   "tcp"
          FromPort:                     443
          ToPort:                       443


  LoadBalancerHostname:
    Type:                               "AWS::Route53::RecordSet"
    Properties:
      Name:                             !Sub "${Hostname}.${DNSDomain}"
      Type:                             "A"
      HostedZoneName:                   !Sub "${DNSDomain}."
      AliasTarget:
        DNSName:                        !GetAtt LoadBalancer.DNSName
        HostedZoneId:                   !GetAtt LoadBalancer.CanonicalHostedZoneID
        EvaluateTargetHealth:           false


  LoadBalancer:
    Type:                               "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Name:                             !Sub "${BaseName}"
      Type:                             "application"
      Scheme:                           "internet-facing"
      IpAddressType:                    "ipv4"
      SecurityGroups:                   [ !Ref LoadBalancerSecurityGroup ]
      Subnets:                          !Ref PublicSubnetIds
      LoadBalancerAttributes:
        -                               { 'Key': 'access_logs.s3.enabled',  'Value': true }
        -                               { 'Key': 'access_logs.s3.bucket',   'Value': !Ref LogsBucketName }
        -                               { 'Key': 'access_logs.s3.prefix',   'Value': "LoadBalancer" }


  LoadBalancerHTTPListener:
    Type:                               "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      LoadBalancerArn:                  !Ref LoadBalancer
      Protocol:                         "HTTP"
      Port:                             80
      DefaultActions:
        - Type:                         "redirect"
          RedirectConfig:
            Protocol:                   "HTTPS"
            Port:                       443
            StatusCode:                 "HTTP_301"


  LoadBalancerHTTPSListener:
    Type:                               "AWS::ElasticLoadBalancingV2::Listener"
    DependsOn:                          [ LambdaTargetGroup ]
    Properties:
      LoadBalancerArn:                  !Ref LoadBalancer
      Protocol:                         "HTTPS"
      Port:                             443
      Certificates:
        - CertificateArn:               !Ref ACMCertificateArn
      DefaultActions:
        - Type:                         "fixed-response"
          FixedResponseConfig:
            StatusCode:                 404


  LoadBalancerIndexDispatchRule:
    Type:                               "AWS::ElasticLoadBalancingV2::ListenerRule"
    Properties:
      ListenerArn:                      !Ref LoadBalancerHTTPSListener
      Priority:                         10
      Conditions:
        - Field:                        "path-pattern"
          Values:
            -                           "/"
      Actions:
        - Type:                         "authenticate-cognito"
          Order:                        100
          AuthenticateCognitoConfig:
            UserPoolArn:                !GetAtt CognitoUserPool.Arn
            UserPoolClientId:           !Ref CognitoUserPoolClient
            UserPoolDomain:             !Ref CognitoUserPoolDomain
            OnUnauthenticatedRequest:   "authenticate"
        - Type:                         "fixed-response"
          Order:                        200
          FixedResponseConfig:
            StatusCode:                 200
            ContentType:                "text/html"
            MessageBody:                !Sub |
                                        <!doctype html>
                                        <html lang="en">
                                        <head>
                                            <title>&lambda;Photo</title>
                                            <link rel='StyleSheet' href='//${Hostname}-static.${DNSDomain}/css/app.css' type='text/css'>
                                        </head>
                                        <body ng-app="lPhoto">
                                            <div id="ngWrapper" ng-view>
                                                Loading...
                                            </div>
                                            <script>
                                                window.STATIC_HOST = "${Hostname}-static.${DNSDomain}";
                                            </script>
                                            <script src="//ajax.googleapis.com/ajax/libs/angularjs/1.6.1/angular.min.js"></script>
                                            <script src="//ajax.googleapis.com/ajax/libs/angularjs/1.6.1/angular-route.min.js"></script>
                                            <script src="//${Hostname}-static.${DNSDomain}/js/app.js"></script>
                                            <script src="//${Hostname}-static.${DNSDomain}/js/main.js"></script>
                                            <script src="//${Hostname}-static.${DNSDomain}/js/upload.js"></script>
                                        </body>
                                        </html>


  LoadBalancerAPIDispatchRule:
    Type:                               "AWS::ElasticLoadBalancingV2::ListenerRule"
    Properties:
      ListenerArn:                      !Ref LoadBalancerHTTPSListener
      Priority:                         20
      Conditions:
        - Field:                        "path-pattern"
          Values:
            -                           "/api/*"
      Actions:
        - Type:                         "authenticate-cognito"
          Order:                        100
          AuthenticateCognitoConfig:
            UserPoolArn:                !GetAtt CognitoUserPool.Arn
            UserPoolClientId:           !Ref CognitoUserPoolClient
            UserPoolDomain:             !Ref CognitoUserPoolDomain
            OnUnauthenticatedRequest:   "deny"
        - Type:                         "forward"
          Order:                        200
          TargetGroupArn:               !Ref LambdaTargetGroup


  LambdaTargetGroup:
    Type:                               "AWS::ElasticLoadBalancingV2::TargetGroup"
    DependsOn:                          [ LoadBalancerInvocationPermission ]
    Properties:
      Name:                             !Sub "${BaseName}-LambdaTarget"
      TargetType:                       "lambda"
      HealthCheckEnabled:               false
      Targets:
        - Id:                           !GetAtt WebappLambdaFunction.Arn


  LoadBalancerInvocationPermission:
    Type:                               "AWS::Lambda::Permission"
    Properties:
      Action:                           "lambda:InvokeFunction"
      FunctionName:                     !Ref WebappLambdaFunction
      Principal:                        "elasticloadbalancing.amazonaws.com"

  ##
  ## CloudFront
  ##

  CloudFrontOriginIdentity:
    Type:                               "AWS::CloudFront::CloudFrontOriginAccessIdentity"
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment:                        !Sub "Origin identity for ${BaseName} deployment"


  CloudFrontHostname:
    Type:                               "AWS::Route53::RecordSet"
    Properties:
      Name:                             !Sub "${Hostname}-static.${DNSDomain}"
      Type:                             "CNAME"
      HostedZoneName:                   !Sub "${DNSDomain}."
      TTL:                              "60"
      ResourceRecords:                  [ !GetAtt CloudFront.DomainName ]


  CloudFront:
    Type:                               "AWS::CloudFront::Distribution"
    DependsOn:                          [ LoadBalancer, LogsBucketPolicy, StaticBucketPolicy, ImageBucketPolicy ]
    Properties:
      DistributionConfig:
        Comment:                        !Sub "${BaseName} deployment"
        Enabled:                        true
        Logging:
          Bucket:                       !GetAtt LogsBucket.DomainName
          Prefix:                       "CloudFront"
          IncludeCookies:               false
        DefaultRootObject:              ""
        Aliases:                        [ !Sub "${Hostname}-static.${DNSDomain}" ]
        ViewerCertificate:
          AcmCertificateArn:            !Ref ACMCertificateArn
          MinimumProtocolVersion:       "TLSv1.2_2018"
          SslSupportMethod:             "sni-only"
        Origins:
          - Id:                         "StaticContent"
            DomainName:                 !Sub "${StaticBucketName}.s3.amazonaws.com"
            S3OriginConfig:
              OriginAccessIdentity:     !Sub "origin-access-identity/cloudfront/${CloudFrontOriginIdentity}"
          - Id:                         "Images"
            DomainName:                 !Sub "${ImageBucketName}.s3.amazonaws.com"
            S3OriginConfig:
              OriginAccessIdentity:     !Sub "origin-access-identity/cloudfront/${CloudFrontOriginIdentity}"
          - Id:                         "ALB"
            DomainName:                 !Ref LoadBalancerHostname
            CustomOriginConfig:
              HTTPPort:                 443
              OriginProtocolPolicy:     "https-only"
        CacheBehaviors:
          - PathPattern:                "/images/*"
            ViewerProtocolPolicy:       "allow-all"             # images may be used on a non-HTTP site
            TargetOriginId:             "Images"
            AllowedMethods:             [ "GET", "HEAD" ]
            ForwardedValues:
              QueryString:              false
            Compress:                   false                   # images should already be compressed
            MinTTL:                     0
            MaxTTL:                     !Ref CloudFrontAssetTTL
            DefaultTTL:                 !Ref CloudFrontAssetTTL
          - PathPattern:                "/templates/*"
            ViewerProtocolPolicy:       "https-only"
            TargetOriginId:             "StaticContent"
            AllowedMethods:             [ "GET", "HEAD" ]
            ForwardedValues:
              QueryString:              false
            Compress:                   true
            MinTTL:                     0
            MaxTTL:                     !Ref CloudFrontAssetTTL
            DefaultTTL:                 !Ref CloudFrontAssetTTL
          - PathPattern:                "/css/*"
            ViewerProtocolPolicy:       "https-only"
            TargetOriginId:             "StaticContent"
            AllowedMethods:             [ "GET", "HEAD" ]
            ForwardedValues:
              QueryString:              false
            Compress:                   true
            MinTTL:                     0
            MaxTTL:                     !Ref CloudFrontAssetTTL
            DefaultTTL:                 !Ref CloudFrontAssetTTL
          - PathPattern:                "/js/*"
            ViewerProtocolPolicy:       "https-only"
            TargetOriginId:             "StaticContent"
            AllowedMethods:             [ "GET", "HEAD" ]
            ForwardedValues:
              QueryString:              false
            Compress:                   true
            MinTTL:                     0
            MaxTTL:                     !Ref CloudFrontAssetTTL
            DefaultTTL:                 !Ref CloudFrontAssetTTL
        DefaultCacheBehavior:
            # note: unknown URL, will be served a 404 from ALB
            ViewerProtocolPolicy:       "redirect-to-https"
            TargetOriginId:             "ALB"
            AllowedMethods:             [ "GET", "HEAD" ]
            ForwardedValues:
              QueryString:              false
            Compress:                   true
            MinTTL:                     0
            MaxTTL:                     !Ref CloudFrontAssetTTL
            DefaultTTL:                 !Ref CloudFrontAssetTTL


Outputs:

  URL:
    Description:                        "The URL for the application root"
    Value:                              !Sub "https://${Hostname}.${DNSDomain}/"
